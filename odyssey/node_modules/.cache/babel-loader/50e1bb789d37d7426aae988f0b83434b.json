{"ast":null,"code":"var _jsxFileName = \"/Users/scott/Desktop/lighthouse/final-project/odyssey/src/components/MapComponents/MapEditor.js\",\n    _s = $RefreshSig$();\n\nimport 'leaflet/dist/leaflet.css';\nimport { MapContainer, TileLayer, Marker, Popup, useMapEvents } from 'react-leaflet';\nimport './MapEditor.css';\nimport { useState } from 'react';\nimport AddMarkers from './AddMarkers';\nimport { themeAttributionFinder, themeURLFinder } from '../../Helpers/mapHelper';\nimport { generateMarkers } from '../../Helpers/markerHelpers'; //the MapEditor Component generates a map that can be edited\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction MapEditor(props) {\n  _s();\n\n  //only enable map edit when something like an edit button is clicked. editable state keeps track of this.\n  const [editable, setEditable] = useState(false); //markers state represents the markers on this map. defaults to the props passed in.\n  //the \"marker\" object passed in is converted to jsx by generateMarkers in markerHelpers function\n\n  const [markers, setMarkers] = useState(generateMarkers(props.markers)); //Defaulting Map Themes (theme...Finder() converts theme string such as 'TOPO' to the random garbage string that theme actually needs)\n\n  const mapThemeAttribution = props.mapOptions && themeAttributionFinder(props.mapOptions.themeAttribution);\n  const mapThemeURL = props.mapOptions && themeURLFinder(props.mapOptions.themeAttribution);\n  const markersJSX = generateMarkers(markers);\n  return (\n    /*#__PURE__*/\n    // TileLayer Component: determines theme\n    // AddMarker Component: has to be a child of MapContainer. it attaches a listener\n    // that updates the markers state if editable is set to true\n    _jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        children: /*#__PURE__*/_jsxDEV(MapContainer, {\n          center: props.mapOptions.center,\n          zoom: props.mapOptions.zoom,\n          scrollWheelZoom: false,\n          doubleClickZoom: false,\n          children: [/*#__PURE__*/_jsxDEV(TileLayer, {\n            attribution: mapThemeAttribution,\n            url: mapThemeURL\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 35,\n            columnNumber: 11\n          }, this), /*#__PURE__*/_jsxDEV(AddMarkers, {\n            markers: markers,\n            editable: editable,\n            setEditable: setEditable,\n            setMarkers: setMarkers\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 36,\n            columnNumber: 11\n          }, this), markersJSX]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 34,\n          columnNumber: 9\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 33,\n        columnNumber: 7\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: e => {\n          e.preventDefault();\n\n          if (!editable) {\n            setEditable(true);\n          }\n        },\n        className: \"add mapButton\",\n        children: \"Add\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 41,\n        columnNumber: 7\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 32,\n      columnNumber: 5\n    }, this)\n  );\n}\n\n_s(MapEditor, \"y8PK1WkM17VoJ48/3mP/p4jqTnc=\");\n\n_c = MapEditor;\nexport default MapEditor;\n\nvar _c;\n\n$RefreshReg$(_c, \"MapEditor\");","map":{"version":3,"sources":["/Users/scott/Desktop/lighthouse/final-project/odyssey/src/components/MapComponents/MapEditor.js"],"names":["MapContainer","TileLayer","Marker","Popup","useMapEvents","useState","AddMarkers","themeAttributionFinder","themeURLFinder","generateMarkers","MapEditor","props","editable","setEditable","markers","setMarkers","mapThemeAttribution","mapOptions","themeAttribution","mapThemeURL","markersJSX","center","zoom","e","preventDefault"],"mappings":";;;AAAA,OAAO,0BAAP;AACA,SAASA,YAAT,EAAuBC,SAAvB,EAAkCC,MAAlC,EAA0CC,KAA1C,EAAiDC,YAAjD,QAAqE,eAArE;AACA,OAAO,iBAAP;AAEA,SAASC,QAAT,QAAyB,OAAzB;AAEA,OAAOC,UAAP,MAAuB,cAAvB;AACA,SAASC,sBAAT,EAAiCC,cAAjC,QAAuD,yBAAvD;AACA,SAASC,eAAT,QAAgC,6BAAhC,C,CAEA;;;;AAEA,SAASC,SAAT,CAAmBC,KAAnB,EAA0B;AAAA;;AACxB;AACA,QAAM,CAACC,QAAD,EAAWC,WAAX,IAA0BR,QAAQ,CAAC,KAAD,CAAxC,CAFwB,CAGxB;AACA;;AACA,QAAM,CAACS,OAAD,EAAUC,UAAV,IAAwBV,QAAQ,CAACI,eAAe,CAACE,KAAK,CAACG,OAAP,CAAhB,CAAtC,CALwB,CAOxB;;AACA,QAAME,mBAAmB,GAAGL,KAAK,CAACM,UAAN,IAAoBV,sBAAsB,CAACI,KAAK,CAACM,UAAN,CAAiBC,gBAAlB,CAAtE;AACA,QAAMC,WAAW,GAAGR,KAAK,CAACM,UAAN,IAAoBT,cAAc,CAACG,KAAK,CAACM,UAAN,CAAiBC,gBAAlB,CAAtD;AAEA,QAAME,UAAU,GAAGX,eAAe,CAACK,OAAD,CAAlC;AAEA;AAAA;AACE;AAEA;AACA;AAEA;AAAA,8BACE;AAAA,+BACE,QAAC,YAAD;AAAc,UAAA,MAAM,EAAEH,KAAK,CAACM,UAAN,CAAiBI,MAAvC;AAA+C,UAAA,IAAI,EAAEV,KAAK,CAACM,UAAN,CAAiBK,IAAtE;AAA4E,UAAA,eAAe,EAAE,KAA7F;AAAoG,UAAA,eAAe,EAAE,KAArH;AAAA,kCACE,QAAC,SAAD;AAAW,YAAA,WAAW,EAAEN,mBAAxB;AAA6C,YAAA,GAAG,EAAEG;AAAlD;AAAA;AAAA;AAAA;AAAA,kBADF,eAEE,QAAC,UAAD;AAAY,YAAA,OAAO,EAAEL,OAArB;AAA8B,YAAA,QAAQ,EAAEF,QAAxC;AAAkD,YAAA,WAAW,EAAEC,WAA/D;AAA4E,YAAA,UAAU,EAAEE;AAAxF;AAAA;AAAA;AAAA;AAAA,kBAFF,EAGGK,UAHH;AAAA;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,cADF,eASE;AAAQ,QAAA,OAAO,EAAGG,CAAD,IAAO;AACtBA,UAAAA,CAAC,CAACC,cAAF;;AACA,cAAI,CAACZ,QAAL,EAAe;AACbC,YAAAA,WAAW,CAAC,IAAD,CAAX;AACD;AACF,SALD;AAKG,QAAA,SAAS,EAAE,eALd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cATF;AAAA;AAAA;AAAA;AAAA;AAAA;AANF;AAyBD;;GAtCQH,S;;KAAAA,S;AAwCT,eAAeA,SAAf","sourcesContent":["import 'leaflet/dist/leaflet.css';\nimport { MapContainer, TileLayer, Marker, Popup, useMapEvents } from 'react-leaflet'\nimport './MapEditor.css'\n\nimport { useState } from 'react';\n\nimport AddMarkers from './AddMarkers';\nimport { themeAttributionFinder, themeURLFinder } from '../../Helpers/mapHelper';\nimport { generateMarkers } from '../../Helpers/markerHelpers';\n\n//the MapEditor Component generates a map that can be edited\n\nfunction MapEditor(props) {\n  //only enable map edit when something like an edit button is clicked. editable state keeps track of this.\n  const [editable, setEditable] = useState(false);\n  //markers state represents the markers on this map. defaults to the props passed in.\n  //the \"marker\" object passed in is converted to jsx by generateMarkers in markerHelpers function\n  const [markers, setMarkers] = useState(generateMarkers(props.markers));\n\n  //Defaulting Map Themes (theme...Finder() converts theme string such as 'TOPO' to the random garbage string that theme actually needs)\n  const mapThemeAttribution = props.mapOptions && themeAttributionFinder(props.mapOptions.themeAttribution);\n  const mapThemeURL = props.mapOptions && themeURLFinder(props.mapOptions.themeAttribution);\n\n  const markersJSX = generateMarkers(markers);\n\n  return (\n    // TileLayer Component: determines theme\n\n    // AddMarker Component: has to be a child of MapContainer. it attaches a listener\n    // that updates the markers state if editable is set to true\n\n    <div>\n      <div>\n        <MapContainer center={props.mapOptions.center} zoom={props.mapOptions.zoom} scrollWheelZoom={false} doubleClickZoom={false}>\n          <TileLayer attribution={mapThemeAttribution} url={mapThemeURL} />\n          <AddMarkers markers={markers} editable={editable} setEditable={setEditable} setMarkers={setMarkers}></AddMarkers>\n          {markersJSX}\n        </MapContainer>\n      </div>\n\n      <button onClick={(e) => {\n        e.preventDefault();\n        if (!editable) {\n          setEditable(true);\n        }\n      }} className={\"add mapButton\"}>\n        Add\n      </button>\n    </div>\n  )\n}\n\nexport default MapEditor;\n\n\n\n"]},"metadata":{},"sourceType":"module"}